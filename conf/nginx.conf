
#user  nobody;
worker_processes  4;

error_log  logs/error.log warn;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    #include       mime.types;
    default_type  application/octet-stream;
    client_max_body_size 10m;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    log_format srcache_log '$remote_addr - $remote_user [$time_local] "$request" '
      '"$status" $body_bytes_sent $request_time $bytes_sent $request_length '
      '[$upstream_response_time] [$srcache_fetch_status] [$srcache_store_status] [$srcache_expire]';


    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;
    gzip_min_length 10k;
    gzip_types application/json application/javascript application/css text/plain text/javascript;

    upstream object_service {
      server 127.0.0.1:4444;
    }

    upstream redis {
        server 127.0.0.1:6379;
        keepalive 512;
    }


    server {
        listen       28081;
        server_name  localhost:28081;
        server_name_in_redirect  on;

        #charset koi8-r;
#rewrite /lnwz_omc /lnwz_omc/ permanent;
#location ~ /lnwz_omc/(.*)$ {
        rewrite ^/(lnwz_omc/getSummary[^/].*)$ $scheme://localhost:28081/$1;
        location /lnwz_omc/ {
#          set $uuu $1;
#          if ($args !~ ^$) {
#            set $uuu "${uuu}?${args}";
#          }
          proxy_pass http://localhost/lnwz_omc/;
          proxy_redirect off;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        location = /redis {
          internal;
          set_md5 $redis_key $args;
          set $redis_key "c:${redis_key}";
          redis_pass redis;
        }
        location = /redis2 {
          internal;

          set_unescape_uri $exptime $arg_exptime;
          set_unescape_uri $key $arg_key;
          set_md5 $redis_key $key;
          set $redis_key "c:${redis_key}";

          redis2_query set $redis_key $echo_request_body;
          redis2_query expire $redis_key $exptime;
          redis2_pass redis;
        }

        location ~ /purge(/.*) {
          set $key $1;
          # 如果参数列表非空，加入参数列表
          if ($args !~ ^$) { 
            set $key "${key}?${args}";
          }
          set_md5 $redis_key $key;
          set $redis_key "c:${redis_key}";
          #redis2_query del $redis_key;
          redis2_query expire $redis_key 2;
          redis2_pass redis;
        }

        #access_log  logs/host.access.log  main;
#
        location /obj/ {
          srcache_store_private on;
          srcache_methods GET;
          srcache_response_cache_control off;

          if ($uri ~ /obj/.*$){
            set $key $request_uri;
            set_escape_uri $escaped_key $key;

            srcache_fetch GET /redis $key;
            srcache_default_expire 900;
            srcache_store PUT /redis2 key=$escaped_key&exptime=$srcache_expire;

            set_md5 $md5key $key;
            set $md5key "c:${md5key}";
            add_header X-md5-key $md5key;
            add_header X-Cached-From $srcache_fetch_status;
            add_header X-Cached-Store $srcache_store_status;
            add_header X-Key $key;
            add_header X-Query_String $query_string;
            add_header X-expire $srcache_expire;

            access_log logs/obj_access.log srcache_log;
          }

          # 检查数字签名，确保合法访问,顺便在必要时清理缓存
          access_by_lua_file lua/obj_access.lua;
          

          proxy_pass http://object_service/obj/;
          proxy_redirect off;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location / {
            root   html;
            index  index.html index.htm;
        }

        location /lua {
            default_type 'text/html';
            lua_code_cache on;
            set $foo "BLABLABLA";
            content_by_lua_file lua/hello.lua;
        }

        location /token {
            default_type 'text/html';
            lua_code_cache on;
            access_by_lua_file lua/access.lua;
            content_by_lua_block {
                ngx.say(ngx.req.get_headers()['X-Auth-User'])
            }
        }
        location /uwsgi {
          include uwsgi_params;
          uwsgi_pass unix:/home/paco/uwsgi/uwsgi.socket;
        }

        location /passwd {
            internal;
            default_type 'text/html';
            lua_code_cache on;
            content_by_lua_file lua/passwd.lua;
        }

        location /digest {
          lua_code_cache off;
          default_type 'text/html';
          set $realm "test.ericsson.com";
          access_by_lua_file lua/digest_access.lua;
          echo "digest auth pass";
        }

        location /ws {
          lua_code_cache off;
          content_by_lua_file lua/ws.lua;
        }


        # redirect server error pages to the static page /50x.html
        #
        error_page  403              /403.html;
        error_page  404              /404.html;
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
